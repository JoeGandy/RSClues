{"version":3,"sources":["../../src/commands/serve.js"],"names":["path","require","openurl","signalExit","compression","express","historyFallback","getConfigFile","preferDefault","chalk","module","exports","program","prefixPaths","port","open","host","parseInt","config","directory","pathPrefix","root","join","app","router","Router","use","static","req","res","next","accepts","status","sendFile","server","listen","openUrlString","console","log","blue","bold","Promise","resolve","catch","err","yellow","code","signal","close"],"mappings":"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","sourcesContent":["/* @flow weak */\nconst path = require(`path`)\nconst openurl = require(`better-opn`)\nconst signalExit = require(`signal-exit`)\nconst compression = require(`compression`)\nconst express = require(`express`)\nconst historyFallback = require(`express-history-api-fallback`)\nconst getConfigFile = require(`../bootstrap/get-config-file`)\nconst preferDefault = require(`../bootstrap/prefer-default`)\nconst chalk = require(`chalk`)\n\nmodule.exports = async program => {\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config`)\n  )\n\n  let pathPrefix = config && config.pathPrefix\n  pathPrefix = prefixPaths && pathPrefix ? pathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n\n  const app = express()\n  const router = express.Router()\n  router.use(compression())\n  router.use(express.static(`public`))\n  router.use(historyFallback(`index.html`, { root }))\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      res.status(404).sendFile(`404.html`, { root })\n    } else {\n      next()\n    }\n  })\n  app.use(pathPrefix, router)\n\n  const server = app.listen(port, host, () => {\n    let openUrlString = `http://${host}:${port}${pathPrefix}`\n    console.log(\n      `${chalk.blue(`info`)} gatsby serve running at: ${chalk.bold(\n        openUrlString\n      )}`\n    )\n    if (open) {\n      console.log(`${chalk.blue(`info`)} Opening browser...`)\n      Promise.resolve(openurl(openUrlString)).catch(err =>\n        console.log(\n          `${chalk.yellow(\n            `warn`\n          )} Browser not opened because no browser was found`\n        )\n      )\n    }\n  })\n\n  signalExit((code, signal) => {\n    server.close()\n  })\n}\n"],"file":"serve.js"}